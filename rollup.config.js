import babel from 'rollup-plugin-babel'
import builtins from 'rollup-plugin-node-builtins'
import commonjs from 'rollup-plugin-commonjs'
import flow from 'rollup-plugin-flow'
import globals from 'rollup-plugin-node-globals'
import json from 'rollup-plugin-json'
import resolve from 'rollup-plugin-node-resolve'
import packageInfo from './package.json'
import { terser } from 'rollup-plugin-terser'

// The text to appear at the top of the generated files.
const licenseBanner = `/**
 * @license
 * https://github.com/the-bitcoin-token/BitcoinSource
 * Copyright (c) 2019 Bitcoin Computer
 * Copyright (c) 2019 Brenton Gunning
 * Copyright (c) 2018 Janez Urevc
 * Copyright (c) 2018 Clemens Ley
 * Copyright (c) 2017-2018 Emilio Almansi
 * Copyright (c) 2013-2017 BitPay, Inc.
 * Copyright (c) 2009-2015 The Bitcoin Core developers
 * Copyright (c) 2014 Ryan X. Charles
 * Copyright (c) 2014 reddit, Inc.
 * Copyright (c) 2011 Stefan Thomas <justmoon@members.fsf.org>
 * Copyright (c) 2011 Google Inc.
 * Distributed under the MIT software license, see the accompanying
 * file LICENSE or http://www.opensource.org/licenses/mit-license.php.
 */`

// Disable circular dependency warnings in our library because they are allowed in ES6 and don't
// cause problems for us. The maintainer of Rollup does not plan to remove this warning. This is
// his recommendation. See: https://github.com/rollup/rollup/issues/2271
function onwarnHook(warning, rollupWarn) {
  if (warning.code !== 'CIRCULAR_DEPENDENCY') {
    rollupWarn(warning)
  }
}

/**
 * We build Bitcoin Source in three flavors:
 *
 *    1. 'main' - For use in node applications
 *    2. 'browser' - For use in a web browser
 *    3. 'module' - For use where ES6 is available
 *
 * Each is a minified version for sending to others. We do not build sourcemaps - if developers
 * need them for debugging, they may turn them on with the sourcemap option below (which must be
 * enabled at the top level, and in terser).
 */

const main = {
  input: 'src/index.js',
  output: {
    // This is the default build for this library.
    file: packageInfo.main,
    // The CommonJS format is suitable within node.js projects.
    format: 'cjs',
    // Place the license at the top of the file
    banner: licenseBanner,
    // Minify code generated by rollup
    compact: true
  },
  // The cjs build is designed for node so these modules should be present.
  external: [
    'assert',
    'url',
    'buffer',
    'crypto',
    'util'
  ],
  plugins: [
    // Strip out flow types first before any other processing
    flow(),
    // Support importing json files, including package.json for versioning.
    json(),
    // Parse require() statements in any dependencies. Any non-commonjs modules will be ignored,
    // so we can run this across all dependencies, but bitcoin source files must use ES6 imports.
    commonjs({
      include: 'node_modules/**'
    }),
    // Use the node module resolution algorithm
    resolve({
      // Prefer built-in modules like assert and buffer over browser shims
      preferBuiltins: true
    }),
    // Use babel to support the latest features and minify
    babel({
      // Prefer the config here (specific to rollup) to that in babel.rc
      babelrc: false,
      presets: [
        // Disable converting modules because rollup will do this better
        ["@babel/preset-env", { targets: { esmodules: true } }],
        // Minify before the terser
        ["minify", {
          // Don't minify the built-in objects. This breaks for some reason.
          builtIns: false,
          // Our terser will mangle names and this breaks for some reason
          mangle: false
        }]
      ]
    }),
    // Minify the resulting code
    terser()
  ],
  // Disable circular dependency warnings
  onwarn: onwarnHook
}

const browser = {
  input: 'src/index.js',
  output: {
    // We use the 'browser' suffix over 'iife' because there is more to this build than that.
    file: packageInfo.browser,
    // The IIFE format is suitable within a script tag. AMD or UMD would also work.
    format: 'iife',
    // IIFE format requires a 'name' which becomes the global variable users access.
    name: 'BitcoinSource',
    // Place the license at the top of the file
    banner: licenseBanner,
    // Minify code generated by rollup
    compact: true
  },
  plugins: [
    // Strip out flow types first before any other processing
    flow(),
    // Support importing json files, including package.json for versioning.
    json(),
    // Parse require() statements in any dependencies. Any non-commonjs modules will be ignored,
    // so we can run this across all dependencies, but bitcoin source files must use ES6 imports.
    commonjs({
      include: 'node_modules/**'
    }),
    // Use the node module resolution algorithm
    resolve({
      // Use the browser builds for dependencies. (although ES6 would be better)
      browser: true,
      // Prefer browser shims like the assert module
      preferBuiltins: false
    }),
    // Provide global properties that are normally available in node (ie. global)
    globals(),
    // Provide browser shims for node built-ins (ie. buffer, assert, url)
    builtins(),
    // Use babel to support the latest features and minify
    babel({
      // Prefer the config here (specific to rollup) to that in babel.rc
      babelrc: false,
      presets: [
        // Disable converting modules because rollup will do this better
        ["@babel/preset-env", { targets: { esmodules: true } }],
        // Minify before the terser
        ["minify", {
          // Don't minify the built-in objects. This breaks for some reason.
          builtIns: false,
          // Our terser will mangle names and this breaks for some reason
          mangle: false
        }]
      ]
    }),
    // Minify the resulting code
    terser()
  ],
  // Disable circular dependency warnings
  onwarn: onwarnHook,
}

const module = {
  input: 'src/index.js',
  output: {
    // The module is best used within other projects to be compiled.
    file: packageInfo.module,
    // The ES build exports ES6 modules
    format: 'es',
    // Place the license at the top of the file
    banner: licenseBanner,
    // Minify code generated by rollup
    compact: true
  },
  // The cjs build is designed for node so these modules should be present.
  external: [
    'assert',
    'url',
    'buffer',
    'crypto',
    'util'
  ],
  plugins: [
    // Strip out flow types first before any other processing
    flow(),
    // Support importing json files, including package.json for versioning.
    json(),
    // Parse require() statements in any dependencies. Any non-commonjs modules will be ignored,
    // so we can run this across all dependencies, but bitcoin source files must use ES6 imports.
    commonjs({
      include: 'node_modules/**'
    }),
    // Use the node module resolution algorithm
    resolve({
      // Prefer built-in modules like assert and buffer over browser shims
      preferBuiltins: true
    }),
    // Use babel to support the latest features and minify
    babel({
      // Prefer the config here (specific to rollup) to that in babel.rc
      babelrc: false,
      presets: [
        // Disable converting modules because rollup will do this better
        ["@babel/preset-env", { targets: { esmodules: true } }],
        // Minify before the terser
        ["minify", {
          // Don't minify the built-in objects. This breaks for some reason.
          builtIns: false,
          // Our terser will mangle names and this breaks for some reason
          mangle: false
        }]
      ]
    }),
    // Minify the resulting code
    terser({
      compress: {
        // Use ES6 compressions
        ecma: 6,
      }
    })
  ],
  // Disable circular dependency warnings
  onwarn: onwarnHook,
}

export default [main, browser, module]
